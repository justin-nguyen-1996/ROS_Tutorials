
ROS directory structure
========================
├── build
│   ├── Nothing that important
│   └── Needs to be removed for a "make clean"
│
├── devel
│   ├── setup.bash --> the script that needs to be sourced to set certain environment variables (e.g. $ROS_PACKAGE_PATH)
│   └── devel
│       ├── include --> where the header files are placed by default
│       └── lib     --> where the executables are placed by default
│
└── src
    ├── beginner_tutorials --> packages
    │   ├── CMakeLists.txt
    │   ├── include
    │   ├── launch     --> roslaunch files
    │   ├── msg        --> contains message files (which define new message types)
    │   ├── package.xml
    │   ├── scripts    --> .py files
    │   ├── src        --> .cpp files
    │   └── srv        --> contains service files (client sends a request and server sends a response)
    └── CMakeLists.txt --> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake



Tutorials
==========
1. http://wiki.ros.org/ROS/Tutorials
2. http://wiki.ros.org/simulator_gazebo/Tutorials



Creating a ROS workspace and packages
======================================
1. Create a folder that will act as the ROS workspace
2. Create an src/ folder inside the workspace
3. Run catkin_make in the top-level directory
4. Make a folder inside src/ that will act as the package:
   `cd src/`
   `catkin_create_pkg <package_name> [depend1] [depend2]`
5. Re-run catkin_make in the top-level directory
6. Add the workspace to the ROS environment: `. devel/setup.bash`
7. Create the actual source file: src/<package_name>/<source_files.cpp>
8. Edit the CMakeLists.txt file so that CMake knows to build an executable for the new file:
   `add_executable(<exe_name> src/<exe_name>.cpp)`
   `target_link_libraries(<exe_name> ${catkin_LIBRARIES})`



Running a ROS program/package
==============================
1. Start the ROS master: `roscore`
2. To run an executable (node): `rosrun <package> <node>` or `rosrun <package> <node> __name:=<new name>`
3. To see the ROS computational tree: `rqt_graph`
4. Also helpful: `rosnode list` and `rostopic list`



Creating a ROS msg and srv
===========================
1. http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv



Recording data (creating a bag file)
===========================
1. Run `rosbag record -a`
2. Or run `rosbag record -O subset <topic_name1> <topic_name2>`
3. Close the terminal running this command to stop recording



Using Gazebo with ROS
===========================
1. Launch an empty world: `roslaunch gazebo_ros empty_world.launch`



Using TF
=========
1. To see the tree showing how the frames are related: `rosrun tf view_frames`
2. To see the transform b/w two frames: `rosrun tf tf_echo [reference_frame] [target_frame]`



Miscellaneous Info
===================
1. Install a package using apt-get: `sudo apt-get install ros-kinetic-pr2-teleop`
2. Find the packages a package depends on: `rospack depends <package_name>`
3. Rename a node: `rosrun <package_name> <node_name> __name:=<new_name>`
4. Execute a service: `rosservice call` tab-tab tab-tab (then just fill out the auto-generated fields)
5. URDF (Universal Robotic Description Format) - a type of XML format used to describe all elements of a robot
6. SDF (Simulation Description Format) - a type of format used to describe all elements of the robot and its world

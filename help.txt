
ROS directory structure
========================
├── build
│   ├── Nothing that important
│   └── Needs to be removed for a "make clean"
│
├── devel
│   ├── setup.bash --> the script that needs to be sourced to set certain environment variables (e.g. $ROS_PACKAGE_PATH)
│   └── devel
│       ├── include --> where the header files are placed by default
│       └── lib     --> where the executables are placed by default
│
└── src
    ├── beginner_tutorials --> packages
    │   ├── CMakeLists.txt
    │   ├── include
    │   ├── launch     --> roslaunch files
    │   ├── msg        --> contains message files (which define new message types)
    │   ├── package.xml
    │   ├── scripts    --> .py files
    │   ├── src        --> .cpp files
    │   └── srv        --> contains service files (client sends a request and server sends a response)
    └── CMakeLists.txt --> /opt/ros/kinetic/share/catkin/cmake/toplevel.cmake



Tutorials
==========
1. http://wiki.ros.org/ROS/Tutorials
2. http://wiki.ros.org/simulator_gazebo/Tutorials



Creating a ROS workspace and packages
======================================
1. Create a folder that will act as the ROS workspace
2. Create an src/ folder inside the workspace
3. Run catkin_make in the top-level directory
4. Make a folder inside src/ that will act as the package:
   `cd src/`
   `catkin_create_pkg <package_name> [depend1] [depend2]`
   - Standard/Common dependencies when creating a package
     - roscpp
     - std_msgs
     - tf
     - tf2
     - tf2_ros
     - geometry_msgs
     - sensor_msgs
     - nav_msgs
     - laser_geometry
     - message_generation
     - message_runtime
5. Re-run catkin_make in the top-level directory
6. Add the workspace to the ROS environment: `. devel/setup.bash`
7. Create the actual source file: src/<package_name>/<source_files.cpp>
8. Edit the CMakeLists.txt file so that CMake knows to build an executable for the new file:
   `add_executable(<exe_name> src/<exe_name>.cpp)`
   `target_link_libraries(<exe_name> ${catkin_LIBRARIES})`



Running a ROS program/package
==============================
1. Start the ROS master: `roscore`
2. To run an executable (node): `rosrun <package> <node>` or `rosrun <package> <node> __name:=<new name>`
3. To see the ROS computational tree: `rqt_graph`
4. Also helpful: `rosnode list` and `rostopic list`



Creating a ROS msg and srv
===========================
1. http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv



Recording data (creating a bag file)
===========================
1. Run `rosbag record -a`
2. Or run `rosbag record -O subset <topic_name1> <topic_name2>`
3. Close the terminal running this command to stop recording



Using Gazebo with ROS
===========================
1. Launch an empty world: `roslaunch gazebo_ros empty_world.launch`



Using TF
=========
1. To see the tree showing how the frames are related: `rosrun tf view_frames`
2. To see the transform b/w two frames: `rosrun tf tf_echo <reference_frame> <target_frame>`
3. Can check timestamps using: `rosrun tf tf_monitor <reference_frame> <target_frame>`
   - maybe also just `tf_monitor`



Launch Files
=============
1. Typical fields for a node
   - <node name="laser_pub" pkg="lidar" type="lidar" args="-d temp -s $(arg home_dir)" respawn="false" output="screen"/>
   - "pkg" is the package name
   - "type" is the name
   - "output" can be "screen" or "log", where screen is stdout.
      Can also output to stdout by running the .launch file with --screen flag
2. Can define variables and execute shell-esque commands
   - <arg name="home_dir" default="$(find full_sys)"/>
     - This creates a variable in the .launch file called "home_dir"
     - The variable is set to the directory path where "full_sys" is found (i.e. the output of $(find) for full_sys)
   - <arg name="rviz_file" default="$(arg home_dir)/cfg/robot.rviz"/>
     - This creates a variable caleld "rviz_file"
     - The variable is set to $(home_dir)/cfg/robot.rviz
     - Note the variable substitution syntax of $(arg home_dir)
   - <include file="$(find package_name)/launch/node1.launch"/>
     - This includes the contents of another file



CMakeLists.txt Files
====================
1. If following the "3 files per class" approach (one .cpp for the class source file, one .h for the class header,
   one .cpp for the node executable)
   - You'll need to modify the CMakeLists.txt file so that everything gets linked properly
   - https://answers.ros.org/question/204869/c-one-file-class-in-node-to-three-files-class-node-and-header/



Doxygen
========
1. Generate the Doxygen documentation by running `rosdoc_lite .` (note the '.') from inside the package
   to create a doc/ folder in the package's directory
2. View the generated documentation by running `open doc/html/index.html`
3. For more details, see the Help_Files/doxygen.txt file in the repo



Miscellaneous Info
===================
1. Install a package using apt-get: `sudo apt-get install ros-kinetic-pr2-teleop`
2. Find the packages a package depends on: `rospack depends <package_name>`
3. Rename a node: `rosrun <package_name> <node_name> __name:=<new_name>`
4. Execute a service: `rosservice call` tab-tab tab-tab (then just fill out the auto-generated fields)
5. URDF (Universal Robotic Description Format) - a type of XML format used to describe all elements of a robot
6. SDF (Simulation Description Format) - a type of format used to describe all elements of the robot and its world
7. If the LaserScan messages aren't being displayed in rviz but everything looks right
   - Try setting the "size" of the LaserScan points to be bigger in rviz (e.g. 0.05 instead of 0.01)
8. If you get a weird error when running `catkin build` (something like "current CMAKE_PREFIX doesn't match the
cached one. Run catkin clean to fix") and you keep getting this error even though you run `catkin clean`
   - Try running `catkin clean`
   - Then `rm -rf .catkin_tools/` in the top-level folder
   - Then `catkin init`
   - Then `catkin build`
   - The issue deals with how CMAKE_PREFIX and ROS_PACKAGE_PATH conflict or something like that
   - Try manually setting ROS_PACKAGE_PATH to '' because it gets cached sometimes then close and re-open the terminal
